import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class BirdGame extends JFrame {
    private final int WINDOW_WIDTH = 800;
    private final int WINDOW_HEIGHT = 600;
    private final int BIRD_SIZE = 40;
    private final int BREAD_SIZE = 20;
    private final int BUCKET_WIDTH = 80;
    private final int BUCKET_HEIGHT = 100;
    private final int HAPPY_POINTS_PER_BREAD = 10;

    private List<Point> birds;
    private Point breadPosition;
    private Point bucketPosition;
    private int happyPoints;

    public BirdGame() {
        setTitle("Bird Game");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);

        birds = new ArrayList<>();
        breadPosition = new Point(-100, -100); // initialize bread off-screen
        bucketPosition = new Point(WINDOW_WIDTH / 2 - BUCKET_WIDTH / 2, WINDOW_HEIGHT - BUCKET_HEIGHT);
        happyPoints = 0;

        Timer timer = new Timer(100, e -> {
            moveBirds();
            checkCollisions();
            repaint();
        });
        timer.start();

        spawnBirds(5); // Spawn 5 birds initially

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (birdIsHappy(e.getPoint())) {
                    happyPoints += HAPPY_POINTS_PER_BREAD;
                    breadPosition.setLocation(-100, -100); // Move bread off-screen
                }
            }
        });

        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void spawnBirds(int count) {
        Random rand = new Random();
        for (int i = 0; i < count; i++) {
            int x = rand.nextInt(WINDOW_WIDTH - BIRD_SIZE);
            int y = rand.nextInt(WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT);
            birds.add(new Point(x, y));
        }
    }

    private void moveBirds() {
        Random rand = new Random();
        for (Point bird : birds) {
            bird.translate(rand.nextInt(5) - 2, rand.nextInt(5) - 2);
            // Ensure the bird stays inside the window
            bird.x = Math.max(0, Math.min(bird.x, WINDOW_WIDTH - BIRD_SIZE));
            bird.y = Math.max(0, Math.min(bird.y, WINDOW_HEIGHT - BIRD_SIZE - BUCKET_HEIGHT));
        }
    }

    private boolean birdIsHappy(Point clickPoint) {
        Rectangle breadBounds = new Rectangle(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
        return breadBounds.contains(clickPoint);
    }

    private void checkCollisions() {
        Rectangle breadBounds = new Rectangle(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
        Rectangle bucketBounds = new Rectangle(bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT);

        if (breadBounds.intersects(bucketBounds)) {
            happyPoints += HAPPY_POINTS_PER_BREAD;
            breadPosition.setLocation(-100, -100); // Move bread off-screen
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawBread(g);
        drawBucket(g);
        drawBirds(g);
        drawScore(g);
    }

    private void drawBread(Graphics g) {
        g.setColor(Color.ORANGE);
        g.fillOval(breadPosition.x, breadPosition.y, BREAD_SIZE, BREAD_SIZE);
    }

    private void drawBucket(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(bucketPosition.x, bucketPosition.y, BUCKET_WIDTH, BUCKET_HEIGHT);
    }

    private void drawBirds(Graphics g) {
        g.setColor(Color.BLUE);
        for (Point bird : birds) {
            g.fillOval(bird.x, bird.y, BIRD_SIZE, BIRD_SIZE);
        }
    }

    private void drawScore(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawString("Happy Points: " + happyPoints, 10, 20);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(BirdGame::new);
    }
}
